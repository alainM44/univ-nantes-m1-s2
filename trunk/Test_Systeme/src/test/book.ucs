#*******************
#   Book system  *
#*******************

# Types and instances declarations
{
	book1, book2 : Book
	user1, user2 : User
}

# Description of the initial state
{
	state(book1)="ordered"
	state(book2)="ordered"
}

#******** USE CASES *********

#use case DELIVER
UC deliver(b:Book)
  scenario "deliver.scenario"
  pre state(b)="ordered" or state(b)="beingfixed"
  post { exists(u:User) {reserved(u, b)} } implies { state(b)="reserved" } and
          { not exists(u:User) {reserved(u, b)} } implies { state(b)="available" }
        
#use case RESERVE
UC reserve(b:Book; u:User)
  scenario "reserve.scenario"
  pre not reserved(u, b)
  post reserved(u, b) and { state(b)="available" } implies {state(b)="reserved"}

#use case BORROW
 UC borrow(b:Book; u:User)
  scenario "borrow.scenario"
  pre (state(b)="available" or ( state(b)="reserved" and reserved(u, b) )) and
         not exists(ob : Book) { b/=ob and has(u, ob) }
  post state(b)="borrowed" and has(u,b) and not reserved(u, b)

#use case RETURN
 UC return(b:Book; u:User)
  scenario "return.scenario"
  pre state(b)="borrowed" and has(u, b)
  post { exists(u:User) {reserved(u, b)} } implies { state(b)="reserved" } and
          { not exists(u:User) {reserved(u, b)} } implies { state(b)="available" } and
          not has(u, b)

#use case REPAIR
 UC repair(b:Book)
  scenario "repair.scenario"
  pre state(b)="available" and damaged(b)
  post not damaged(b) and state(b)="beingfixed"

#use case SETDAMAGED
UC setdamaged(b:Book)
 scenario "setdamaged.scenario"
 pre not damaged(b) and state(b)="borrowed"
 post damaged(b)
 